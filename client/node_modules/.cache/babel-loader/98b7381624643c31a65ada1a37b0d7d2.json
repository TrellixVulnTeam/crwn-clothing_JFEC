{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyC9hb3pz26BRY1BZpJ9bMSV3hOVpHkBXyY\",\n  authDomain: \"crwn-db-d9b43.firebaseapp.com\",\n  projectId: \"crwn-db-d9b43\",\n  storageBucket: \"crwn-db-d9b43.appspot.com\",\n  messagingSenderId: \"697633500066\",\n  appId: \"1:697633500066:web:a014a737883b509d6360fb\",\n  measurementId: \"G-JZH965QQD3\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n  const collectionRef = firestore.collection(\"users\");\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collectionSnapshot\n  });\n\n  if (!userSnapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user: \", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n} else {\n  firebase.app(); // if already initialized, use this one\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/guard14/Developer/ZTM/Complete_React_Developer_2021/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","userSnapshot","get","collectionRef","collection","collectionSnapshot","console","log","exists","displayName","email","createdAt","Date","set","error","message","apps","length","initializeApp","app","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,SAAS,EAAE,eAHE;AAIbC,EAAAA,aAAa,EAAE,2BAJF;AAKbC,EAAAA,iBAAiB,EAAE,cALN;AAMbC,EAAAA,KAAK,EAAE,2CANM;AAObC,EAAAA,aAAa,EAAE;AAPF,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,YAAY,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAA3B;AAEA,QAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,OAArB,CAAtB;AACA,QAAMC,kBAAkB,GAAG,MAAMF,aAAa,CAACD,GAAd,EAAjC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA;AAAF,GAAZ;;AAEA,MAAI,CAACJ,YAAY,CAACO,MAAlB,EAA0B;AACxB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBf,QAA/B;AACA,UAAMgB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMf,OAAO,CAACgB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGf;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOkB,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAc,uBAAd,EAAuCA,KAAK,CAACC,OAA7C;AACD;AACF;;AAED,SAAOlB,OAAP;AACD,CA5BM;;AA8BP,IAAI,CAACZ,QAAQ,CAAC+B,IAAT,CAAcC,MAAnB,EAA2B;AACzBhC,EAAAA,QAAQ,CAACiC,aAAT,CAAuBhC,MAAvB;AACD,CAFD,MAEO;AACLD,EAAAA,QAAQ,CAACkC,GAAT,GADK,CACW;AACjB;;AAED,OAAO,MAAMC,IAAI,GAAGnC,QAAQ,CAACmC,IAAT,EAAb;AACP,OAAO,MAAMtB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMuB,QAAQ,GAAG,IAAIpC,QAAQ,CAACmC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAepC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyC9hb3pz26BRY1BZpJ9bMSV3hOVpHkBXyY\",\n  authDomain: \"crwn-db-d9b43.firebaseapp.com\",\n  projectId: \"crwn-db-d9b43\",\n  storageBucket: \"crwn-db-d9b43.appspot.com\",\n  messagingSenderId: \"697633500066\",\n  appId: \"1:697633500066:web:a014a737883b509d6360fb\",\n  measurementId: \"G-JZH965QQD3\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n\n  const collectionRef = firestore.collection(\"users\");\n  const collectionSnapshot = await collectionRef.get();\n\n  console.log({ collectionSnapshot });\n\n  if (!userSnapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.error(\"Error creating user: \", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n} else {\n  firebase.app(); // if already initialized, use this one\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}