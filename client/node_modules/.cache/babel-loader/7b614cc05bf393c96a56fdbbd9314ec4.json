{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyC9hb3pz26BRY1BZpJ9bMSV3hOVpHkBXyY\",\n  authDomain: \"crwn-db-d9b43.firebaseapp.com\",\n  projectId: \"crwn-db-d9b43\",\n  storageBucket: \"crwn-db-d9b43.appspot.com\",\n  messagingSenderId: \"697633500066\",\n  appId: \"1:697633500066:web:a014a737883b509d6360fb\",\n  measurementId: \"G-JZH965QQD3\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n\n  if (!userSnapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating user: ', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n} else {\n  firebase.app(); // if already initialized, use this one\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/guard14/Developer/ZTM/Complete_React_Developer_2021/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","userSnapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","apps","length","initializeApp","app","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,SAAS,EAAE,eAHA;AAIXC,EAAAA,aAAa,EAAE,2BAJJ;AAKXC,EAAAA,iBAAiB,EAAE,cALR;AAMXC,EAAAA,KAAK,EAAE,2CANI;AAOXC,EAAAA,aAAa,EAAE;AAPJ,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,YAAY,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAA3B;;AAEA,MAAI,CAACD,YAAY,CAACE,MAAlB,EAA0B;AACtB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAAK,CAACG,OAA3C;AACH;AACJ;;AAED,SAAOf,OAAP;AACH,CAvBM;;AAyBP,IAAI,CAACZ,QAAQ,CAAC4B,IAAT,CAAcC,MAAnB,EAA2B;AACvB7B,EAAAA,QAAQ,CAAC8B,aAAT,CAAuB7B,MAAvB;AACH,CAFD,MAEO;AACHD,EAAAA,QAAQ,CAAC+B,GAAT,GADG,CACa;AACnB;;AAED,OAAO,MAAMC,IAAI,GAAGhC,QAAQ,CAACgC,IAAT,EAAb;AACP,OAAO,MAAMnB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMoB,QAAQ,GAAG,IAAIjC,QAAQ,CAACgC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAejC,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyC9hb3pz26BRY1BZpJ9bMSV3hOVpHkBXyY\",\n    authDomain: \"crwn-db-d9b43.firebaseapp.com\",\n    projectId: \"crwn-db-d9b43\",\n    storageBucket: \"crwn-db-d9b43.appspot.com\",\n    messagingSenderId: \"697633500066\",\n    appId: \"1:697633500066:web:a014a737883b509d6360fb\",\n    measurementId: \"G-JZH965QQD3\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const userSnapshot = await userRef.get();\n\n    if (!userSnapshot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n        } catch (error) {\n            console.log('Error creating user: ', error.message);\n        }\n    }\n\n    return userRef;\n}\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(config);\n} else {\n    firebase.app(); // if already initialized, use this one\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}